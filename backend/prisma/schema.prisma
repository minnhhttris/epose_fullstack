generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  owner
  employee
  user
  admin
}

enum Status {
  active
  inactive
}

enum Statement {
  CREATE
  UNPAID
  PAID
  CONFIRMED
  PENDING_PICKUP
  DELIVERING
  DELIVERED
  RECEIVED
  RETURNED
  CANCELLED
  COMPLETED
  RATING
}

enum StatusType {
  CONFIRMED
  RECEIVED
  RETURNED
  COMPLETED
}

enum Gender {
  male
  female
  unisex
  other
}

enum Style {
  ao_dai
  tu_than
  co_phuc
  ao_ba_ba
  da_hoi
  nang_tho
  hoc_duong
  vintage
  ca_tinh
  sexy
  cong_so
  dan_toc
  do_doi
  hoa_trang
  cac_nuoc
}

enum Color {
  red
  blue
  green
  yellow
  black
  white
  pink
  purple
  orange
  brown
  gray
  beige
  colorfull
}

enum SizeEnum {
  S
  M
  L
  XL
}

model User {
  idUser        String    @id @default(uuid())
  email         String    @unique
  password_hash String
  userName      String?
  phoneNumbers  String?
  avatar        String?
  address       String?
  CCCD          String?   @unique
  CCCD_img      String[]
  gender        Gender?
  dateOfBirth   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  coins         Int       @default(0)
  role          Role      @default(user)
  isActive      Boolean   @default(false)
  active        Boolean   @default(true)


  otp          OTP[]
  storeUser    StoreUser[]
  posts        Posts[]
  comments     Comment[]
  bills        Bill[]
  bagShopping  BagShopping[]
  ratings      Rating[]
  attendance   Attendance[]
  notification Notification[]
  userVoucher  UserVoucher[]
  Favorite     Favorite[]

  sentMessages     Message[] @relation("UserSentMessages")
  receivedMessages Message[] @relation("UserReceivedMessages")
}

model OTP {
  idOTP      String   @id @default(uuid())
  code       String
  otpType    String
  expTime    DateTime
  check_used Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [idUser], references: [idUser])
  idUser     String?
}

model Store {
  idStore      String         @id @default(uuid())
  idUser       String
  nameStore    String
  license      String         @unique
  taxCode      String         @unique
  logo         String
  address      String
  rate         Float          @default(0)
  status       Status         @default(inactive)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isActive    Boolean   @default(true)

  user         StoreUser[]
  clothes      Clothes[]
  posts        Posts[]
  notification Notification[]
  bill         Bill[]

  bagItems     BagItem[]
}

/////////////Clothes///////////
model Clothes {
  idItem      String        @id @default(uuid())
  nameItem    String
  description String
  price       Float
  listPicture String[]
  rate        Float         @default(0)
  favorite    Int           @default(0)
  color       Color
  style       Style
  gender      Gender
  number      Int           @default(0)
  idStore     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean   @default(true)

  store       Store         @relation(fields: [idStore], references: [idStore])
  billItems   BillItem[]
  rating      Rating[]
  itemSizes   ItemSizes[]
  bagItems    BagItem[]
}

model ClothesStatus {
  idStatus    String     @id @default(uuid())
  idBill      String
  idItem      String
  statusType  StatusType
  description String
  images      String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  billItem    BillItem   @relation(fields: [idBill, idItem], references: [idBill, idItem])
  bill        Bill       @relation(fields: [idBill], references: [idBill])
}

model ItemSizes {
  idItemSize String   @id @default(uuid())
  idItem     String
  size       SizeEnum
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  clothes    Clothes  @relation(fields: [idItem], references: [idItem])

  @@unique([idItem, size])
}

model Rating {
  idRating      String   @id @default(uuid())
  idItem        String
  idUser        String
  ratingstar    Float
  ratingcomment String?
  createdAt     DateTime @default(now())
  isActive    Boolean   @default(true)

  user          User     @relation(fields: [idUser], references: [idUser])
  clothes       Clothes  @relation(fields: [idItem], references: [idItem])
}

model Bill {
  idBill      String     @id @default(uuid())
  idUser      String
  idStore     String
  sum         Float
  downpayment Float
  lateFee     Float      @default(0)
  dateStart   DateTime
  dateEnd     DateTime
  statement   Statement
  isActive    Boolean   @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [idUser], references: [idUser])
  store       Store      @relation(fields: [idStore], references: [idStore])
  billItems   BillItem[]
  clothesStatuses ClothesStatus[]
}

model BillItem {
  idBill  String
  idItem  String
  size     SizeEnum  
  quantity Int
  
  clothesStatuses ClothesStatus[]

  bill    Bill    @relation(fields: [idBill], references: [idBill])
  clothes Clothes @relation(fields: [idItem], references: [idItem])

  @@id([idBill, idItem])
}

model Posts {
  idPosts   String     @id @default(uuid())
  caption   String?
  picture   String[]
  favorite  Int        @default(0)
  idUser    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  idStore   String
  isActive    Boolean   @default(true)

  user      User       @relation(fields: [idUser], references: [idUser])
  store     Store      @relation(fields: [idStore], references: [idStore])
  comments  Comment[]
  favorites Favorite[]
}

model Comment {
  idComment String   @id @default(uuid())
  idPosts   String
  idUser    String
  comment   String
  createdAt DateTime @default(now())
  isActive    Boolean   @default(true)
  // Relations
  user      User     @relation(fields: [idUser], references: [idUser])
  posts     Posts    @relation(fields: [idPosts], references: [idPosts])
}

model Notification {
  idNotification String   @id @default(uuid())
  idUser         String
  idStore        String
  notification   String
  createdAt      DateTime @default(now())
  // Relations
  user           User     @relation(fields: [idUser], references: [idUser])
  store          Store    @relation(fields: [idStore], references: [idStore])
}

model UserVoucher {
  idUserVoucher String   @id @default(uuid())
  idUser        String
  idVoucher     String
  redeemedAt    DateTime @default(now())
  // Relations
  user          User     @relation(fields: [idUser], references: [idUser])
  voucher       Voucher  @relation(fields: [idVoucher], references: [idVoucher])
}

model Voucher {
  idVoucher     String        @id @default(uuid())
  description   String
  validFrom     DateTime
  validTo       DateTime
  dailyCheckIn  Boolean       @default(false)
  requiredCoins Int
  isActive    Boolean   @default(true)

  userVoucher   UserVoucher[]
}

model Message {
  idMessage    String   @id @default(uuid())
  message      String
  senderType   String
  receiverType String
  senderId     String
  receiverId   String
  sendAt       DateTime @default(now())

  // Relations for polymorphic types
  sender    User @relation("UserSentMessages", fields: [senderId], references: [idUser])
  receiver  User @relation("UserReceivedMessages", fields: [receiverId], references: [idUser])

  @@index([senderId, senderType])
  @@index([receiverId, receiverType])
}

model BagShopping {
    idBag      String   @id @default(uuid())
    idUser     String

    user       User     @relation(fields: [idUser], references: [idUser])
    items      BagItem[] 

    createdAt  DateTime @default(now()) 
    updatedAt  DateTime @updatedAt 
}

model BagItem {
  idBagItem  String   @id @default(uuid())
  idBag      String   
  idItem     String  
  idStore    String
  size       SizeEnum   
  quantity   Int       @default(1) 
  isActive    Boolean   @default(true)

  bagShopping BagShopping @relation(fields: [idBag], references: [idBag])
  clothes     Clothes     @relation(fields: [idItem], references: [idItem])
  store       Store       @relation(fields: [idStore], references: [idStore])

  @@unique([idBag, idItem, size]) 
}

model Favorite {
  idFavorite String @id @default(uuid())
  idUser     String
  idPosts    String

  user       User   @relation(fields: [idUser], references: [idUser])
  posts      Posts  @relation(fields: [idPosts], references: [idPosts])

  @@unique([idUser, idPosts])
}

model StoreUser {
  idStore String
  idUser  String
  role    Role   @default(user)

  user    User   @relation(fields: [idUser], references: [idUser])
  store   Store  @relation(fields: [idStore], references: [idStore])

  @@id([idStore, idUser])
}

model Attendance {
  idAttendance String   @id @default(uuid())
  idUser       String
  checkInTime  DateTime @default(now())

  user         User     @relation(fields: [idUser], references: [idUser])

  @@unique([idUser, checkInTime])
}
